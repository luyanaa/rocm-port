diff --git a/amd/comgr/CMakeLists.txt b/amd/comgr/CMakeLists.txt
index f49f1157e8d1..e2dcadc9074b 100644
--- a/amd/comgr/CMakeLists.txt
+++ b/amd/comgr/CMakeLists.txt
@@ -353,7 +353,12 @@ install(FILES
 
 if(TARGET clangFrontendTool)
   set(CLANG_LIBS
-    clangFrontendTool)
+    clangFrontendTool
+    clangFrontend
+    clangDriver
+    clangSerialization
+    clangBasic
+    )
 else()
   set(CLANG_LIBS
     clang-cpp)
@@ -368,6 +373,21 @@ if (LLVM_LINK_LLVM_DYLIB)
 else()
   llvm_map_components_to_libnames(LLVM_LIBS
     ${LLVM_TARGETS_TO_BUILD}
+    Core
+    CodeGen
+    Option
+    MCParser
+    MC
+    TargetParser
+    Support
+    BinaryFormat
+    MCDisassembler
+    Object
+    Linker
+    BitWriter
+    IRReader
+    BitReader
+    Demangle
     DebugInfoDWARF
     Symbolize)
 endif()
diff --git a/amd/comgr/test/CMakeLists.txt b/amd/comgr/test/CMakeLists.txt
index 3bb5aa36336a..3d2fb529222b 100644
--- a/amd/comgr/test/CMakeLists.txt
+++ b/amd/comgr/test/CMakeLists.txt
@@ -42,7 +42,7 @@ macro(add_test_input_bitcode name input output)
   add_custom_command(
     OUTPUT "${output}"
     COMMAND "$<TARGET_FILE:clang>" -c -emit-llvm -target amdgcn-amd-amdhsa
-    -mcpu=gfx900
+    -mcpu=gfx900 -nogpulib
     ${ARGN} "${CMAKE_CURRENT_SOURCE_DIR}/${input}"
     -o "${output}"
     VERBATIM
diff --git a/clang/lib/Basic/Targets/LoongArch.h b/clang/lib/Basic/Targets/LoongArch.h
index 3313102492cb..09e8d935ec83 100644
--- a/clang/lib/Basic/Targets/LoongArch.h
+++ b/clang/lib/Basic/Targets/LoongArch.h
@@ -44,6 +44,8 @@ public:
     SuitableAlign = 128;
     WCharType = SignedInt;
     WIntType = UnsignedInt;
+    HasFloat128 = true;
+    HasFloat16 = true;
   }
 
   bool setCPU(const std::string &Name) override {
diff --git a/clang/lib/CodeGen/BackendUtil.cpp b/clang/lib/CodeGen/BackendUtil.cpp
index 8c666e2cb463..7c4b42a69498 100644
--- a/clang/lib/CodeGen/BackendUtil.cpp
+++ b/clang/lib/CodeGen/BackendUtil.cpp
@@ -273,6 +273,7 @@ getCodeModel(const CodeGenOptions &CodeGenOpts) {
                            .Case("kernel", llvm::CodeModel::Kernel)
                            .Case("medium", llvm::CodeModel::Medium)
                            .Case("large", llvm::CodeModel::Large)
+                           .Case("extreme", llvm::CodeModel::Large)
                            .Case("default", ~1u)
                            .Default(~0u);
   assert(CodeModel != ~0u && "invalid code model!");
diff --git a/clang/lib/Driver/ToolChains/HIPUtility.cpp b/clang/lib/Driver/ToolChains/HIPUtility.cpp
index f692458b775d..91e8ebfd1016 100644
--- a/clang/lib/Driver/ToolChains/HIPUtility.cpp
+++ b/clang/lib/Driver/ToolChains/HIPUtility.cpp
@@ -24,7 +24,13 @@ using namespace llvm::opt;
 #endif
 
 namespace {
+#if defined(__loongarch_lp64)
+const unsigned HIPCodeObjectAlign = 65536;
+#elif defined(__riscv)
+const unsigned HIPCodeObjectAlign = 65536;
+#else
 const unsigned HIPCodeObjectAlign = 4096;
+#endif
 } // namespace
 
 // Constructs a triple string for clang offload bundler.
@@ -52,7 +56,14 @@ void HIP::constructHIPFatbinCommand(Compilation &C, const JobAction &JA,
 
   // ToDo: Remove the dummy host binary entry which is required by
   // clang-offload-bundler.
+#if defined(__x86_64)
   std::string BundlerTargetArg = "-targets=host-x86_64-unknown-linux";
+#elif defined(__loongarch64)
+  std::string BundlerTargetArg = "-targets=host-loongarch64-unknown-linux";
+#elif defined(__riscv)
+  std::string BundlerTargetArg = "-targets=host-riscv64-unknown-linux";
+#else
+#endif
   // AMDGCN:
   // For code object version 2 and 3, the offload kind in bundle ID is 'hip'
   // for backward compatibility. For code object version 4 and greater, the
diff --git a/clang/lib/Driver/ToolChains/Linux.cpp b/clang/lib/Driver/ToolChains/Linux.cpp
index 930585efd02a..9f7b6869a808 100644
--- a/clang/lib/Driver/ToolChains/Linux.cpp
+++ b/clang/lib/Driver/ToolChains/Linux.cpp
@@ -965,7 +965,7 @@ void Linux::AddHIPRuntimeLibArgs(const ArgList &Args,
     CmdArgs.append(
         {"-rpath", Args.MakeArgString(RocmInstallation->getLibPath())});
 
-  CmdArgs.push_back("-lamdhip64");
+  CmdArgs.push_back("/opt/rocm-next/lib64/libamdhip64.so");
 }
 
 void Linux::AddIAMCUIncludeArgs(const ArgList &DriverArgs,
diff --git a/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp b/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
index 2fd0b64c36ae..f5be0d31d81f 100644
--- a/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
+++ b/clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp
@@ -335,9 +335,21 @@ fatbinary(ArrayRef<std::pair<StringRef, StringRef>> InputFiles,
   SmallVector<StringRef, 16> CmdArgs;
   CmdArgs.push_back(*OffloadBundlerPath);
   CmdArgs.push_back("-type=o");
+#if defined(__loongarch64)
+  CmdArgs.push_back("-bundle-align=65536");
+#elif defined(__riscv)
+  CmdArgs.push_back("-bundle-align=65536");
+#else
   CmdArgs.push_back("-bundle-align=4096");
-
+#endif
+#if defined(__x86_64)
   SmallVector<StringRef> Targets = {"-targets=host-x86_64-unknown-linux"};
+#elif defined(__loongarch64)
+  SmallVector<StringRef> Targets = {"-targets=host-loongarch64-unknown-linux"};
+#elif defined(__riscv)
+  SmallVector<StringRef> Targets = {"-targets=host-riscv64-unknown-linux"};
+#else
+#endif
   for (const auto &[File, Arch] : InputFiles)
     Targets.push_back(Saver.save("hipv4-amdgcn-amd-amdhsa--" + Arch));
   CmdArgs.push_back(Saver.save(llvm::join(Targets, ",")));
@@ -462,6 +470,8 @@ Expected<StringRef> linkDevice(ArrayRef<StringRef> InputFiles,
   case Triple::aarch64_be:
   case Triple::ppc64:
   case Triple::ppc64le:
+  case Triple::loongarch64:
+  case Triple::riscv64:
     return generic::clang(InputFiles, Args);
   default:
     return createStringError(inconvertibleErrorCode(),
diff --git a/llvm/lib/Target/AMDGPU/AMDGPUAsmPrinter.cpp b/llvm/lib/Target/AMDGPU/AMDGPUAsmPrinter.cpp
index eb30f31af6d6..67cc858a182c 100644
--- a/llvm/lib/Target/AMDGPU/AMDGPUAsmPrinter.cpp
+++ b/llvm/lib/Target/AMDGPU/AMDGPUAsmPrinter.cpp
@@ -1238,6 +1238,14 @@ bool AMDGPUAsmPrinter::PrintAsmOperand(const MachineInstr *MI, unsigned OpNo,
 void AMDGPUAsmPrinter::getAnalysisUsage(AnalysisUsage &AU) const {
   AU.addRequired<AMDGPUResourceUsageAnalysis>();
   AU.addPreserved<AMDGPUResourceUsageAnalysis>();
+
+  // The Dummy pass is necessary because AMDGPUResourceUsageAnalysis will pop
+  // the CGSCC pass manager off of the active pass managers stack. Adding the
+  // Dummy pass will re-insert the CGSCC pass manager into said stack again
+  // through CallGraphSCCPass::assignPassManager.
+  AU.addRequired<DummyCGSCCPass>();
+  AU.addPreserved<DummyCGSCCPass>();
+
   AsmPrinter::getAnalysisUsage(AU);
 }
 
diff --git a/llvm/lib/Target/AMDGPU/AMDGPUResourceUsageAnalysis.cpp b/llvm/lib/Target/AMDGPU/AMDGPUResourceUsageAnalysis.cpp
index db5d2bbcf5bb..5c1c8801585c 100644
--- a/llvm/lib/Target/AMDGPU/AMDGPUResourceUsageAnalysis.cpp
+++ b/llvm/lib/Target/AMDGPU/AMDGPUResourceUsageAnalysis.cpp
@@ -151,9 +151,12 @@ bool AMDGPUResourceUsageAnalysis::runOnModule(Module &M) {
 
     SIFunctionResourceInfo &Info = CI.first->second;
     MachineFunction *MF = MMI.getMachineFunction(*F);
-    assert(MF && "function must have been generated already");
-    Info = analyzeResourceUsage(*MF, TM);
-    HasIndirectCall |= Info.HasIndirectCall;
+    assert((MF || TPC->requiresCodeGenSCCOrder()) &&
+           "function must have been generated already");
+    if (MF) {
+      Info = analyzeResourceUsage(*MF, TM);
+      HasIndirectCall |= Info.HasIndirectCall;
+    }
   }
 
   if (HasIndirectCall)
diff --git a/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp b/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
index d297d115d59c..e0928d7eb9a4 100644
--- a/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
+++ b/llvm/lib/Target/LoongArch/LoongArchISelLowering.cpp
@@ -303,6 +303,19 @@ LoongArchTargetLowering::LoongArchTargetLowering(const TargetMachine &TM,
   setTargetDAGCombine(ISD::OR);
   setTargetDAGCombine(ISD::SRL);
 
+  setOperationAction(ISD::FP16_TO_FP,        MVT::f32,   Expand);
+  setOperationAction(ISD::FP_TO_FP16,        MVT::f32,   Expand);
+  setOperationAction(ISD::FP16_TO_FP,        MVT::f64,   Expand);
+  setOperationAction(ISD::FP_TO_FP16,        MVT::f64,   Expand);
+  setOperationAction(ISD::SPLAT_VECTOR, MVT::f16, Custom);
+  setTruncStoreAction(MVT::f32, MVT::f16, Expand);
+
+  setLoadExtAction(ISD::EXTLOAD, MVT::f32, MVT::f16, Expand);
+  setLibcallName(RTLIB::FPEXT_F16_F32, "__extendhfsf2");
+  setLibcallName(RTLIB::FPROUND_F32_F16, "__truncsfhf2");
+  setLoadExtAction(ISD::EXTLOAD, MVT::f64, MVT::f16, Expand);
+  setTruncStoreAction(MVT::f64, MVT::f16, Expand);
+
   // Set DAG combine for 'LSX' feature.
 
   if (Subtarget.hasExtLSX())
